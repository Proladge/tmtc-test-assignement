{
  "info": {
    "name": "Task Management API",
    "description": "A comprehensive collection for testing the Task Management API with Users and UserTasks",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_postman_id": "task-management-api-collection"
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "https://localhost:7076",
      "type": "string"
    },
    {
      "key": "userId",
      "value": "",
      "type": "string",
      "description": "Store user ID for reuse"
    },
    {
      "key": "taskId",
      "value": "",
      "type": "string",
      "description": "Store task ID for reuse"
    }
  ],
  "item": [
    {
      "name": "Users",
      "item": [
        {
          "name": "Get All Users",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const users = pm.response.json();",
                  "    if (users && users.length > 0) {",
                  "        pm.collectionVariables.set('userId', users[0].id);",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/users",
              "host": ["{{baseUrl}}"],
              "path": ["api", "users"]
            }
          },
          "response": []
        },
        {
          "name": "Get User by ID",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/users/{{userId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "users", "{{userId}}"]
            }
          },
          "response": []
        },
        {
          "name": "Get User with Tasks",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/users/{{userId}}/tasks",
              "host": ["{{baseUrl}}"],
              "path": ["api", "users", "{{userId}}", "tasks"]
            }
          },
          "response": []
        },
        {
          "name": "Create User - Alice",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 201) {",
                  "    const user = pm.response.json();",
                  "    pm.collectionVariables.set('userId', user.id);",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Alice\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/users",
              "host": ["{{baseUrl}}"],
              "path": ["api", "users"]
            }
          },
          "response": []
        },
        {
          "name": "Create User - Bob",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Bob\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/users",
              "host": ["{{baseUrl}}"],
              "path": ["api", "users"]
            }
          },
          "response": []
        },
        {
          "name": "Create User - Charlie",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Charlie\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/users",
              "host": ["{{baseUrl}}"],
              "path": ["api", "users"]
            }
          },
          "response": []
        },
        {
          "name": "Update User",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Alice Updated\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/users/{{userId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "users", "{{userId}}"]
            }
          },
          "response": []
        },
        {
          "name": "Delete User",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/users/{{userId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "users", "{{userId}}"]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Tasks",
      "item": [
        {
          "name": "Get All Tasks",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const tasks = pm.response.json();",
                  "    if (tasks && tasks.length > 0) {",
                  "        pm.collectionVariables.set('taskId', tasks[0].id);",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/tasks",
              "host": ["{{baseUrl}}"],
              "path": ["api", "tasks"]
            }
          },
          "response": []
        },
        {
          "name": "Get Task by ID",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/tasks/{{taskId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "tasks", "{{taskId}}"]
            }
          },
          "response": []
        },
        {
          "name": "Create Task - Implement Authentication",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 201) {",
                  "    const task = pm.response.json();",
                  "    pm.collectionVariables.set('taskId', task.id);",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"Implement Authentication\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/tasks",
              "host": ["{{baseUrl}}"],
              "path": ["api", "tasks"]
            }
          },
          "response": []
        },
        {
          "name": "Create Task - Write Unit Tests",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"Write Unit Tests\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/tasks",
              "host": ["{{baseUrl}}"],
              "path": ["api", "tasks"]
            }
          },
          "response": []
        },
        {
          "name": "Create Task - Setup CI/CD",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"Setup CI/CD Pipeline\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/tasks",
              "host": ["{{baseUrl}}"],
              "path": ["api", "tasks"]
            }
          },
          "response": []
        },
        {
          "name": "Create Task - Database Migration",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"Database Migration Scripts\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/tasks",
              "host": ["{{baseUrl}}"],
              "path": ["api", "tasks"]
            }
          },
          "response": []
        },
        {
          "name": "Update Task - Change Title",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"Implement OAuth2 Authentication\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/tasks/{{taskId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "tasks", "{{taskId}}"]
            }
          },
          "response": []
        },
        {
          "name": "Update Task - Change State to InProgress",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"state\": \"InProgress\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/tasks/{{taskId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "tasks", "{{taskId}}"]
            }
          },
          "response": []
        },
        {
          "name": "Update Task - Mark as Completed",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"state\": \"Completed\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/tasks/{{taskId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "tasks", "{{taskId}}"]
            }
          },
          "response": []
        },
        {
          "name": "Update Task - Assign to User",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"assignedToUserId\": \"{{userId}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/tasks/{{taskId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "tasks", "{{taskId}}"]
            }
          },
          "response": []
        },
        {
          "name": "Assign Task to User",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/tasks/{{taskId}}/assign/{{userId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "tasks", "{{taskId}}", "assign", "{{userId}}"]
            }
          },
          "response": []
        },
        {
          "name": "Unassign Task",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/tasks/{{taskId}}/unassign",
              "host": ["{{baseUrl}}"],
              "path": ["api", "tasks", "{{taskId}}", "unassign"]
            }
          },
          "response": []
        },
        {
          "name": "Delete Task",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/tasks/{{taskId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "tasks", "{{taskId}}"]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Test Scenarios",
      "item": [
        {
          "name": "Test Scenario 1: Basic User and Task Creation",
          "item": [
            {
              "name": "1.1 Create User Alice",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('User created successfully', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "if (pm.response.code === 201) {",
                      "    const user = pm.response.json();",
                      "    pm.collectionVariables.set('testUserId1', user.id);",
                      "    pm.test('User has correct name', function () {",
                      "        pm.expect(user.name).to.eql('Alice');",
                      "    });",
                      "}"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Alice\"\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/api/users",
                  "host": ["{{baseUrl}}"],
                  "path": ["api", "users"]
                }
              }
            },
            {
              "name": "1.2 Create Task - Should Auto-Assign to Alice",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Task created successfully', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "if (pm.response.code === 201) {",
                      "    const task = pm.response.json();",
                      "    pm.collectionVariables.set('testTaskId1', task.id);",
                      "    pm.test('Task is auto-assigned to Alice', function () {",
                      "        pm.expect(task.assignedToUserId).to.eql(pm.collectionVariables.get('testUserId1'));",
                      "        pm.expect(task.assignedToUserName).to.eql('Alice');",
                      "    });",
                      "    pm.test('Task state is InProgress', function () {",
                      "        pm.expect(task.state).to.eql('InProgress');",
                      "    });",
                      "}"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"title\": \"Test Task Auto-Assignment\"\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/api/tasks",
                  "host": ["{{baseUrl}}"],
                  "path": ["api", "tasks"]
                }
              }
            }
          ]
        },
        {
          "name": "Test Scenario 2: Task Limit Enforcement",
          "item": [
            {
              "name": "2.1 Create Bob",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "if (pm.response.code === 201) {",
                      "    const user = pm.response.json();",
                      "    pm.collectionVariables.set('testUserId2', user.id);",
                      "}"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Bob\"\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/api/users",
                  "host": ["{{baseUrl}}"],
                  "path": ["api", "users"]
                }
              }
            },
            {
              "name": "2.2 Create Task 1 for Bob",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"title\": \"Bob Task 1\"\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/api/tasks",
                  "host": ["{{baseUrl}}"],
                  "path": ["api", "tasks"]
                }
              }
            },
            {
              "name": "2.3 Create Task 2 for Bob",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"title\": \"Bob Task 2\"\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/api/tasks",
                  "host": ["{{baseUrl}}"],
                  "path": ["api", "tasks"]
                }
              }
            },
            {
              "name": "2.4 Create Task 3 for Bob",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"title\": \"Bob Task 3\"\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/api/tasks",
                  "host": ["{{baseUrl}}"],
                  "path": ["api", "tasks"]
                }
              }
            },
            {
              "name": "2.5 Create Task 4 - Should Stay Waiting",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Task created but stays in Waiting state', function () {",
                      "    pm.response.to.have.status(201);",
                      "    const task = pm.response.json();",
                      "    pm.expect(task.state).to.eql('Waiting');",
                      "    pm.expect(task.assignedToUserId).to.be.null;",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"title\": \"Bob Task 4 - Should Wait\"\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/api/tasks",
                  "host": ["{{baseUrl}}"],
                  "path": ["api", "tasks"]
                }
              }
            }
          ]
        },
        {
          "name": "Test Scenario 3: Error Handling",
          "item": [
            {
              "name": "3.1 Create Duplicate User - Should Fail",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Duplicate user creation fails', function () {",
                      "    pm.response.to.have.status(400);",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Alice\"\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/api/users",
                  "host": ["{{baseUrl}}"],
                  "path": ["api", "users"]
                }
              }
            },
            {
              "name": "3.2 Create Task with Empty Title - Should Fail",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Empty title task creation fails', function () {",
                      "    pm.response.to.have.status(400);",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"title\": \"\"\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/api/tasks",
                  "host": ["{{baseUrl}}"],
                  "path": ["api", "tasks"]
                }
              }
            },
            {
              "name": "3.3 Get Non-existent User - Should Return 404",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Non-existent user returns 404', function () {",
                      "    pm.response.to.have.status(404);",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/api/users/00000000-0000-0000-0000-000000000000",
                  "host": ["{{baseUrl}}"],
                  "path": ["api", "users", "00000000-0000-0000-0000-000000000000"]
                }
              }
            }
          ]
        }
      ]
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "exec": [
          ""
        ],
        "type": "text/javascript"
      }
    },
    {
      "listen": "test",
      "script": {
        "exec": [
          ""
        ],
        "type": "text/javascript"
      }
    }
  ]
}
